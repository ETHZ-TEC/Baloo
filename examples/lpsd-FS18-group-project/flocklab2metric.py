#!/usr/bin/env python

import sys, os, getopt
from struct import *

def usage():
  print "Usage: flocklab2metric.py <sink address> <serial-input> <powersummary>"
  print ""
  print "  <sink address>: address of the sink node (so to exclude it from the metric evaluation)"
  print "  <serial-input>: serial file generated by FlockLab"
  print "  <powersummary>: optional. 'powerprofilingstats.csv' from FlockLab"

##############################################################################
#
# Main
#
##############################################################################
def main(argv):

  serialfile = None
  powerfile = None
  nodes = [22,2,4,8,15,3,31,32,33,6,16,1,28,18,10]
  
  if len(argv) < 2:
    usage()
    sys.exit()

  serialfile = argv[1]
  inf = open(serialfile, "r")
  
  if len(argv) > 2:
    powerfile = argv[2]
    ppf = open(powerfile, "r")
  
  sinknode = int(argv[0]) # this node is not included in power assesment
  
  sources={}
  line = inf.readline()
  while line != '':
    if line[0]=='#':
      line = inf.readline()
      continue
    #print line
    #(ts, obs, id, dir, tag, src, seq, data) = line[0:-1].split(',', 7)
    (ts, obs, id, dir, pkt) = line.split(',', 4)
    if int(obs) == int(sinknode):
      if "Pkt:" in pkt:
        (tag, pkt) = pkt.split('Pkt:')
        (src, seq, data) = pkt[0:-1].split(',', 2)
        src = int(src)
        seq = int(seq)
        data = int(data)
        if src in nodes:
          if not src in sources:
            sources[src] = {}
          sources[src][seq] = data
  
    line = inf.readline()
    
  #inf.close()

  index = 0
  data_payload={}
  sdf = open("expected_data.lst", "r")
  line = sdf.readline()
  while line != '':
    #print line
    index = index + 1
    data_payload[index] = int(line)
    line = sdf.readline()
  
  datayield = 0
  for src in sources:
    pk_ok = check_data(src, sources[src], data_payload)
    print "%d: %d (%d ok) packets" % (src, len(sources[src]), pk_ok)
    datayield = datayield + pk_ok
    
  datayield = float(datayield) / (len(nodes) * 200.0)
  kpi_datayield = datayield
  print "Data Yield: %0.2f %% (%0.2f)" % (100 * datayield, kpi_datayield)
  
  if powerfile is not None:
    sumcurrent = 0.0
    numnodes = 0
    line = ppf.readline()
    while line != '':
      if line[0]=='#':
        line = ppf.readline()
        continue
      (obs, id, current) = line[0:-1].split(',', 3)
      if int(obs) in nodes and int(obs)!=int(sinknode):
        numnodes = numnodes + 1
        sumcurrent = sumcurrent + float(current)
      line = ppf.readline()
    avg_current = sumcurrent / float(numnodes)
    kpi_current = 1 - (avg_current / 25.0)
    print "Average Current Drain: %0.2f mA (%0.2f)" % (avg_current, kpi_current)
    print "Performance Metric: %0.2f" % (kpi_current * 0.5 + kpi_datayield * 0.5)
  
def check_data(src, pktlist, data_payload):
  pk_ok = 0
  for seq in sorted(pktlist):
    if seq > 200:
      break
    #print " %d:%d %d %d" % (seq, pktlist[seq], data_payload[seq], data_payload[seq] == pktlist[seq])
    if data_payload[seq] == pktlist[seq]:
      pk_ok = pk_ok + 1
  return pk_ok
  
if __name__ == "__main__":
  main(sys.argv[1:])
